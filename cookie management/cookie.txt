Want a cookie?
Let's start with more information about how HTTP works. Remember that as HTTP is a stateless protocol, it is not possible to identify which requests come from the same user. Each request stands on its own and is unrelated to other requests. This is a problem, because typically one wants to know what a user has done before, in the previous requests. 
For example, a user wants to access her or his account in a site s/he visits frequently. For that s/he has signed up and has a username and a password, so, when s/he accesses the site, the username and password are required in order to guarantee that the person accessing is the one who has signed up (there could be important information about the person, even the person's credit card data). So, there is an HTTP request where the person sends the user and password. Letâ€™s say for instance: after the person logged in, let's say he or she wants to buy something on the site, so, there is another HTTP request saying that the s/he wants to buy an item using the credit card information that is associated with this account, have the item sent to a certain address also stored together with her or his user information. The application has to be completely sure that the second request corresponds to the same user. If the application cannot associate different requests from the same user, the system should ask the username and password in every request, after every user action. That would drive a person get crazy, wouldn't it?

In order to face this problem, there is a special mechanism called cookies, small pieces of information (a short string) that are stored on the client side, and then sent to the server attached to each request. One of them is a Session identifier, useful to identify the user and its session. 
When the user accesses a website, the server returns a "Set-cookie" header providing a cookie name, expiration time and the content data. When the user accesses the same website the browser returns the cookie if it hasn't expired. This way, as the user sends her or his username and password, and in the following requests, the browser sends a cookie which lets the server realize that they correspond to the same user, all the communication between the user and the server is traceable. 





Why is this important for a performance tester?
We will see that we need to simulate most tasks that the browser performs, and one of them is cookies management. Remember that we will simulate hundreds and perhaps thousands of concurrent users from the same machines, and we don't want the server to realize that something strange is happening. Actually, we have to prepare our simulation to be as real as possible. For the server responding to the virtual users should be the same as responding to the real user, if it isn't, our test is not as good as it should be.
To do this in the best possible way we need to understand how cookies work and how JMeter manages them, so, check the next unit!